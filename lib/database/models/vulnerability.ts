import { sql } from "../connection"

export interface Vulnerability {
  id: string
  cve_id: string | null
  title: string
  description: string
  severity: "critical" | "high" | "medium" | "low"
  cvss_score: number | null
  affected_component: string | null
  fixed_version: string | null
  published_date: Date | null
  created_at: Date
}

export interface VulnerabilityScan {
  id: string
  scan_type: string
  status: "running" | "completed" | "failed"
  vulnerabilities_found: number
  critical_count: number
  high_count: number
  medium_count: number
  low_count: number
  scan_results: any
  started_at: Date
  completed_at: Date | null
}

export class VulnerabilityModel {
  static async create(vulnData: {
    cve_id?: string
    title: string
    description: string
    severity: "critical" | "high" | "medium" | "low"
    cvss_score?: number
    affected_component?: string
    fixed_version?: string
    published_date?: Date
  }): Promise<Vulnerability> {
    const result = await sql`
      INSERT INTO vulnerabilities (cve_id, title, description, severity, cvss_score, affected_component, fixed_version, published_date)
      VALUES (${vulnData.cve_id || null}, ${vulnData.title}, ${vulnData.description}, ${vulnData.severity}, ${vulnData.cvss_score || null}, ${vulnData.affected_component || null}, ${vulnData.fixed_version || null}, ${vulnData.published_date || null})
      RETURNING *
    `
    return result[0] as Vulnerability
  }

  static async findByCVE(cveId: string): Promise<Vulnerability | null> {
    const result = await sql`
      SELECT * FROM vulnerabilities WHERE cve_id = ${cveId}
    `
    return (result[0] as Vulnerability) || null
  }

  static async getAll(): Promise<Vulnerability[]> {
    const result = await sql`
      SELECT * FROM vulnerabilities ORDER BY created_at DESC
    `
    return result as Vulnerability[]
  }

  static async getBySeverity(severity: string): Promise<Vulnerability[]> {
    const result = await sql`
      SELECT * FROM vulnerabilities WHERE severity = ${severity} ORDER BY created_at DESC
    `
    return result as Vulnerability[]
  }

  static async delete(id: string): Promise<void> {
    await sql`
      DELETE FROM vulnerabilities WHERE id = ${id}
    `
  }
}

export class VulnerabilityScanModel {
  static async create(scanData: {
    scan_type: string
    status: "running" | "completed" | "failed"
    vulnerabilities_found?: number
    critical_count?: number
    high_count?: number
    medium_count?: number
    low_count?: number
    scan_results?: any
  }): Promise<VulnerabilityScan> {
    const result = await sql`
      INSERT INTO vulnerability_scans (scan_type, status, vulnerabilities_found, critical_count, high_count, medium_count, low_count, scan_results)
      VALUES (${scanData.scan_type}, ${scanData.status}, ${scanData.vulnerabilities_found || 0}, ${scanData.critical_count || 0}, ${scanData.high_count || 0}, ${scanData.medium_count || 0}, ${scanData.low_count || 0}, ${JSON.stringify(scanData.scan_results || {})})
      RETURNING *
    `
    return result[0] as VulnerabilityScan
  }

  static async update(
    id: string,
    updateData: {
      status?: "running" | "completed" | "failed"
      vulnerabilities_found?: number
      critical_count?: number
      high_count?: number
      medium_count?: number
      low_count?: number
      scan_results?: any
      completed_at?: Date
    },
  ): Promise<void> {
    const updates: string[] = []
    const values: any[] = []

    if (updateData.status) {
      updates.push(`status = $${values.length + 1}`)
      values.push(updateData.status)
    }
    if (updateData.vulnerabilities_found !== undefined) {
      updates.push(`vulnerabilities_found = $${values.length + 1}`)
      values.push(updateData.vulnerabilities_found)
    }
    if (updateData.critical_count !== undefined) {
      updates.push(`critical_count = $${values.length + 1}`)
      values.push(updateData.critical_count)
    }
    if (updateData.high_count !== undefined) {
      updates.push(`high_count = $${values.length + 1}`)
      values.push(updateData.high_count)
    }
    if (updateData.medium_count !== undefined) {
      updates.push(`medium_count = $${values.length + 1}`)
      values.push(updateData.medium_count)
    }
    if (updateData.low_count !== undefined) {
      updates.push(`low_count = $${values.length + 1}`)
      values.push(updateData.low_count)
    }
    if (updateData.scan_results) {
      updates.push(`scan_results = $${values.length + 1}`)
      values.push(JSON.stringify(updateData.scan_results))
    }
    if (updateData.completed_at) {
      updates.push(`completed_at = $${values.length + 1}`)
      values.push(updateData.completed_at)
    }

    values.push(id)

    if (updates.length > 0) {
      const query = `UPDATE vulnerability_scans SET ${updates.join(", ")} WHERE id = $${values.length}`
      await sql(query, values)
    }
  }

  static async getLatest(limit = 10): Promise<VulnerabilityScan[]> {
    const result = await sql`
      SELECT * FROM vulnerability_scans ORDER BY started_at DESC LIMIT ${limit}
    `
    return result as VulnerabilityScan[]
  }
}
