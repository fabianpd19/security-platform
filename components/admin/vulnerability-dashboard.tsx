"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Shield, AlertTriangle, Activity, Scan, Download, Eye, CheckCircle, Clock, Bug, TrendingUp } from "lucide-react"
import {
  vulnerabilityScanner,
  type Vulnerability,
  type SecurityEvent,
  type SecurityMetrics,
  getSeverityBadgeVariant,
  formatCVSS,
} from "@/lib/security/vulnerability-scanner"

interface VulnerabilityDashboardProps {
  user: {
    role: string
    permissions: string[]
  }
}

export function VulnerabilityDashboard({ user }: VulnerabilityDashboardProps) {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([])
  const [securityEvents, setSecurityEvents] = useState<SecurityEvent[]>([])
  const [metrics, setMetrics] = useState<SecurityMetrics | null>(null)
  const [isScanning, setIsScanning] = useState(false)
  const [selectedVuln, setSelectedVuln] = useState<Vulnerability | null>(null)
  const [activeTab, setActiveTab] = useState("overview")

  const refreshData = () => {
    setVulnerabilities(vulnerabilityScanner.getVulnerabilities())
    setSecurityEvents(vulnerabilityScanner.getSecurityEvents())
    setMetrics(vulnerabilityScanner.getSecurityMetrics())
  }

  const handleScan = async () => {
    setIsScanning(true)
    try {
      await vulnerabilityScanner.scanForVulnerabilities()
      refreshData()
    } finally {
      setIsScanning(false)
    }
  }

  const handleResolveEvent = (eventId: string) => {
    vulnerabilityScanner.resolveSecurityEvent(eventId)
    refreshData()
  }

  const generateReport = () => {
    const report = vulnerabilityScanner.generateSecurityReport()

    // In a real implementation, this would generate a PDF or send via email
    const reportData = JSON.stringify(report, null, 2)
    const blob = new Blob([reportData], { type: "application/json" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `security-report-${new Date().toISOString().split("T")[0]}.json`
    a.click()
    URL.revokeObjectURL(url)
  }

  useEffect(() => {
    refreshData()

    // Auto-refresh every 30 seconds
    const interval = setInterval(refreshData, 30000)
    return () => clearInterval(interval)
  }, [])

  if (!metrics) {
    return <div className="flex items-center justify-center p-8">Cargando datos de seguridad...</div>
  }

  const getRiskColor = (score: number) => {
    if (score >= 80) return "text-red-600"
    if (score >= 60) return "text-orange-600"
    if (score >= 40) return "text-yellow-600"
    return "text-green-600"
  }

  const getRiskLabel = (score: number) => {
    if (score >= 80) return "Crítico"
    if (score >= 60) return "Alto"
    if (score >= 40) return "Medio"
    return "Bajo"
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Monitor de Vulnerabilidades</h2>
          <p className="text-muted-foreground">Análisis de seguridad y monitoreo de amenazas en tiempo real</p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={generateReport}>
            <Download className="h-4 w-4 mr-2" />
            Generar Reporte
          </Button>
          <Button onClick={handleScan} disabled={isScanning}>
            <Scan className={`h-4 w-4 mr-2 ${isScanning ? "animate-spin" : ""}`} />
            {isScanning ? "Escaneando..." : "Escanear"}
          </Button>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="overview">Resumen</TabsTrigger>
          <TabsTrigger value="vulnerabilities">Vulnerabilidades</TabsTrigger>
          <TabsTrigger value="events">Eventos</TabsTrigger>
          <TabsTrigger value="reports">Reportes</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          {/* Risk Score Card */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <TrendingUp className="h-5 w-5" />
                Puntuación de Riesgo
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center gap-4">
                <div className="text-4xl font-bold">
                  <span className={getRiskColor(metrics.riskScore)}>{metrics.riskScore}</span>
                  <span className="text-lg text-muted-foreground">/100</span>
                </div>
                <div className="flex-1">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm text-muted-foreground">Nivel de Riesgo</span>
                    <Badge variant={metrics.riskScore >= 60 ? "destructive" : "default"}>
                      {getRiskLabel(metrics.riskScore)}
                    </Badge>
                  </div>
                  <Progress value={metrics.riskScore} className="h-2" />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Metrics Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Vulnerabilidades</CardTitle>
                <Bug className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{metrics.totalVulnerabilities}</div>
                <div className="flex gap-2 mt-2">
                  {metrics.criticalVulnerabilities > 0 && (
                    <Badge variant="destructive" className="text-xs">
                      {metrics.criticalVulnerabilities} Críticas
                    </Badge>
                  )}
                  {metrics.highVulnerabilities > 0 && (
                    <Badge variant="destructive" className="text-xs">
                      {metrics.highVulnerabilities} Altas
                    </Badge>
                  )}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Eventos de Seguridad</CardTitle>
                <Activity className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{metrics.securityEvents}</div>
                <p className="text-xs text-muted-foreground">{metrics.unresolvedEvents} sin resolver</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Último Escaneo</CardTitle>
                <Clock className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-sm font-medium">{metrics.lastScanDate.toLocaleDateString()}</div>
                <p className="text-xs text-muted-foreground">{metrics.lastScanDate.toLocaleTimeString()}</p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Estado General</CardTitle>
                <Shield className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="flex items-center gap-2">
                  {metrics.riskScore < 40 ? (
                    <CheckCircle className="h-4 w-4 text-green-600" />
                  ) : (
                    <AlertTriangle className="h-4 w-4 text-orange-600" />
                  )}
                  <span className="text-sm font-medium">{metrics.riskScore < 40 ? "Seguro" : "Requiere Atención"}</span>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Recent Vulnerabilities */}
          <Card>
            <CardHeader>
              <CardTitle>Vulnerabilidades Recientes</CardTitle>
              <CardDescription>Últimas vulnerabilidades detectadas</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {vulnerabilities.slice(0, 5).map((vuln) => (
                  <div key={vuln.id} className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <h4 className="font-medium text-sm">{vuln.title}</h4>
                        <Badge variant={getSeverityBadgeVariant(vuln.severity)}>{vuln.severity.toUpperCase()}</Badge>
                        {vuln.cve && (
                          <Badge variant="outline" className="text-xs">
                            {vuln.cve}
                          </Badge>
                        )}
                      </div>
                      <p className="text-xs text-muted-foreground line-clamp-1">{vuln.description}</p>
                    </div>
                    <Button variant="ghost" size="sm" onClick={() => setSelectedVuln(vuln)}>
                      <Eye className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="vulnerabilities" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Lista de Vulnerabilidades</CardTitle>
                <CardDescription>{vulnerabilities.length} vulnerabilidades detectadas</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3 max-h-96 overflow-y-auto">
                  {vulnerabilities.map((vuln) => (
                    <div
                      key={vuln.id}
                      className={`p-3 border rounded-lg cursor-pointer transition-colors ${
                        selectedVuln?.id === vuln.id
                          ? "border-blue-500 bg-blue-50 dark:bg-blue-900/20"
                          : "hover:bg-gray-50 dark:hover:bg-gray-800"
                      }`}
                      onClick={() => setSelectedVuln(vuln)}
                    >
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center gap-2">
                          <Badge variant={getSeverityBadgeVariant(vuln.severity)}>{vuln.severity.toUpperCase()}</Badge>
                          {vuln.cve && (
                            <Badge variant="outline" className="text-xs">
                              {vuln.cve}
                            </Badge>
                          )}
                          {vuln.exploitAvailable && (
                            <Badge variant="destructive" className="text-xs">
                              EXPLOIT
                            </Badge>
                          )}
                        </div>
                        {vuln.cvss && (
                          <span className="text-xs text-muted-foreground">CVSS: {formatCVSS(vuln.cvss)}</span>
                        )}
                      </div>
                      <h4 className="font-medium text-sm mb-1">{vuln.title}</h4>
                      <p className="text-xs text-muted-foreground line-clamp-2">{vuln.description}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Detalles de Vulnerabilidad</CardTitle>
              </CardHeader>
              <CardContent>
                {selectedVuln ? (
                  <VulnerabilityDetails vulnerability={selectedVuln} />
                ) : (
                  <p className="text-muted-foreground text-center py-8">
                    Selecciona una vulnerabilidad para ver los detalles
                  </p>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="events" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Eventos de Seguridad en Tiempo Real</CardTitle>
              <CardDescription>Monitoreo continuo de actividad sospechosa</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {securityEvents.map((event) => (
                  <div key={event.id} className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <Badge variant={getSeverityBadgeVariant(event.severity)}>{event.severity.toUpperCase()}</Badge>
                        <span className="text-sm font-medium capitalize">{event.type.replace("_", " ")}</span>
                        <span className="text-xs text-muted-foreground">{event.timestamp.toLocaleString()}</span>
                      </div>
                      <p className="text-xs text-muted-foreground">
                        Origen: {event.source} | {JSON.stringify(event.details)}
                      </p>
                    </div>
                    {!event.resolved && (
                      <Button variant="outline" size="sm" onClick={() => handleResolveEvent(event.id)}>
                        Resolver
                      </Button>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="reports" className="space-y-4">
          <SecurityReports />
        </TabsContent>
      </Tabs>
    </div>
  )
}

function VulnerabilityDetails({ vulnerability }: { vulnerability: Vulnerability }) {
  return (
    <div className="space-y-4">
      <div>
        <h3 className="font-semibold mb-2">{vulnerability.title}</h3>
        <p className="text-sm text-muted-foreground">{vulnerability.description}</p>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <p className="text-sm font-medium">Severidad</p>
          <Badge variant={getSeverityBadgeVariant(vulnerability.severity)}>
            {vulnerability.severity.toUpperCase()}
          </Badge>
        </div>
        {vulnerability.cvss && (
          <div>
            <p className="text-sm font-medium">CVSS Score</p>
            <p className="text-sm">{formatCVSS(vulnerability.cvss)}</p>
          </div>
        )}
      </div>

      {vulnerability.affectedPackage && (
        <div>
          <p className="text-sm font-medium">Paquete Afectado</p>
          <p className="text-sm font-mono">{vulnerability.affectedPackage}</p>
          {vulnerability.affectedVersion && (
            <p className="text-xs text-muted-foreground">Versión afectada: {vulnerability.affectedVersion}</p>
          )}
          {vulnerability.fixedVersion && (
            <p className="text-xs text-green-600">Versión corregida: {vulnerability.fixedVersion}</p>
          )}
        </div>
      )}

      <div>
        <p className="text-sm font-medium mb-2">Fechas</p>
        <div className="text-xs text-muted-foreground space-y-1">
          <p>Publicado: {vulnerability.publishedDate.toLocaleDateString()}</p>
          <p>Modificado: {vulnerability.lastModified.toLocaleDateString()}</p>
        </div>
      </div>

      {vulnerability.references.length > 0 && (
        <div>
          <p className="text-sm font-medium mb-2">Referencias</p>
          <div className="space-y-1">
            {vulnerability.references.map((ref, index) => (
              <a
                key={index}
                href={ref}
                target="_blank"
                rel="noopener noreferrer"
                className="text-xs text-blue-600 hover:underline block"
              >
                {ref}
              </a>
            ))}
          </div>
        </div>
      )}

      {vulnerability.exploitAvailable && (
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>⚠️ Exploit público disponible - Priorizar corrección inmediata</AlertDescription>
        </Alert>
      )}
    </div>
  )
}

function SecurityReports() {
  const [report, setReport] = useState<any>(null)

  const generateReport = () => {
    const newReport = vulnerabilityScanner.generateSecurityReport()
    setReport(newReport)
  }

  useEffect(() => {
    generateReport()
  }, [])

  if (!report) {
    return <div>Generando reporte...</div>
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Reporte de Seguridad</CardTitle>
          <CardDescription>Resumen ejecutivo del estado de seguridad actual</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-red-600">{report.summary.criticalVulnerabilities}</div>
              <p className="text-xs text-muted-foreground">Críticas</p>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-600">{report.summary.highVulnerabilities}</div>
              <p className="text-xs text-muted-foreground">Altas</p>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-yellow-600">{report.summary.mediumVulnerabilities}</div>
              <p className="text-xs text-muted-foreground">Medias</p>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">{report.summary.lowVulnerabilities}</div>
              <p className="text-xs text-muted-foreground">Bajas</p>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Recomendaciones de Seguridad</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-2">
            {report.recommendations.map((rec: string, index: number) => (
              <div key={index} className="flex items-start gap-2">
                <CheckCircle className="h-4 w-4 text-green-600 mt-0.5 flex-shrink-0" />
                <p className="text-sm">{rec}</p>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
